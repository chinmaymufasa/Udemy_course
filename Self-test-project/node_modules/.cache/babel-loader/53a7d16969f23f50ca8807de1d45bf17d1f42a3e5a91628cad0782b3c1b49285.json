{"ast":null,"code":"var _jsxFileName = \"/Users/chinmaysatpanthi/CS_PROJECTS/Self-test-project/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Form from './components/Form/Form.js';\nimport Table from './components/Table/Table.js';\nimport Header from './components/Header/Header.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateHandler = userInput => {\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  const yearlyData = []; // per-year results\n\n  let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput['expected-return'] / 100;\n  const duration = +userInput['duration'];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution\n    });\n  }\n  return yearlyData;\n};\nfunction App() {\n  _s();\n  const data = [];\n  const [newData, calculatedData] = useState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), data.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: \"Provide Apporpriate Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 28\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 85\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TOiml82Ecc7Ogz7ptbKzDyoXOn0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Form","Table","Header","jsxDEV","_jsxDEV","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","App","_s","data","newData","calculatedData","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","_c","$RefreshReg$"],"sources":["/Users/chinmaysatpanthi/CS_PROJECTS/Self-test-project/src/App.js"],"sourcesContent":["import React, {useState} from 'react';\n\nimport Form from './components/Form/Form.js';\nimport Table from './components/Table/Table.js';\nimport Header from './components/Header/Header.js';\nconst calculateHandler = (userInput) => {\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  const yearlyData = []; // per-year results\n\n  let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput['expected-return'] / 100;\n  const duration = +userInput['duration'];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution,\n    });\n  }\n\n  return(\n    yearlyData\n  );\n};\n\nfunction App() {\n\n  const data = [];\n\n    const [newData, calculatedData] = useState();\n\n  return (\n    <div>\n\n      <Form></Form>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      {data.length === 0 ? <div className='header'>Provide Apporpriate Data</div> : <Table ></Table>}\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAErC,OAAOC,IAAI,MAAM,2BAA2B;AAC5C,OAAOC,KAAK,MAAM,6BAA6B;AAC/C,OAAOC,MAAM,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;EACtC;EACA;;EAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;EACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;EAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;EAEvC;EACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;IACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;IACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;IACrDF,UAAU,CAACO,IAAI,CAAC;MACd;MACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;MACXC,cAAc,EAAEA,cAAc;MAC9BG,gBAAgB,EAAER,cAAc;MAChCC,kBAAkB,EAAEA;IACtB,CAAC,CAAC;EACJ;EAEA,OACEF,UAAU;AAEd,CAAC;AAED,SAASU,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAMC,IAAI,GAAG,EAAE;EAEb,MAAM,CAACC,OAAO,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,CAAC;EAE9C,oBACEK,OAAA;IAAAkB,QAAA,gBAEElB,OAAA,CAACJ,IAAI;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,EAGZP,IAAI,CAACQ,MAAM,KAAK,CAAC,gBAAGvB,OAAA;MAAKwB,SAAS,EAAC,QAAQ;MAAAN,QAAA,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAAGtB,OAAA,CAACH,KAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE3F,CAAC;AAEV;AAACR,EAAA,CAhBQD,GAAG;AAAAY,EAAA,GAAHZ,GAAG;AAkBZ,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}